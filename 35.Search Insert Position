/* 

// problem link

https://leetcode.com/problems/search-insert-position/description/

// problem statement
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104


*/

//  brute force solution

#include <iostream>
#include <vector>
using namespace std;
int searchInsert(vector<int> &nums, int target)
{
    int s = 0;
    int e = nums.size() - 1;
    int mid = 0;

    if (nums[e] < target)
    {
        return e + 1;
    }

    while (s < e)
    {
        mid = s + (e - s) / 2;

        if (nums[mid] == target)
        {
            return mid;
        }
        else if (nums[s] == target)
        {
            return s;
        }
        else if (nums[e] == target)
        {
            return e;
        }
       
        if (((s + 1) == e) && ((nums[s] < target) && (nums[e] > target)))
        {
          
            return s + 1;
        }

        if (nums[mid] < target)
        {
            s = mid;
        }
        else
        {
            e = mid ;
        }
       
    }
     return 0;
}

int main(int argc, char const *argv[])
{
    // to see result change the input and target 
    vector<int> ans = {1, 3, 5, 6};
    int target = 0;

    cout << searchInsert(ans, target);

    return 0;
}
