/*
Given a string containing digits from 2-9 inclusive,
return all possible letter combinations that the number could represent. 
Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. 
Note that 1 does not map to any letters.
Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

Example 2:
Input: digits = ""
Output: []

Example 3:
Input: digits = "2"
Output: ["a","b","c"]
*/


class Solution {
    private:
    void solving(string digits,int index, string output,  vector<string> &ans,string mapping[]){
        
        if(index >= digits.length()){

            ans.push_back(output);

            return;
        }


        int num = digits[index] - '0';
        string value = mapping[num];

        for(int i = 0;i<value.length(); i++ ){

            output.push_back(value[i]);

            solving(digits, index+1, output, ans, mapping);

            output.pop_back();
        }
    }
public:
    vector<string> letterCombinations(string digits) {
         vector<string> ans;

        if(digits.length() == 0){
            return ans;
        }
        string output = "";
        int index = 0 ;

        string mapping[10] = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};

        solving(digits , index , output, ans, mapping);
        return ans;
    }
};
