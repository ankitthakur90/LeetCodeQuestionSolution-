/*  link problem -:    https://leetcode.com/problems/merge-sorted-array/

problem statement 

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, 
representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. 
To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged,
and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Example 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]

Example 3:
Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]


*/

// Problem Solution This is driver code for questions go through the link
// https://leetcode.com/problems/merge-sorted-array/


#include<vector>
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int>ans;
        int i = 0 ;
        int j = 0 ;
        
        while((i < m) || (j < n)){

            if((i > m-1) || (j > n-1)){
                break;
            }
            
            if((nums1[i] == nums2[j])){
                ans.push_back(nums1[i]);
                ans.push_back(nums2[j]);
                i++;
                j++;

            } else if((nums1[i] < nums2[j])){
                ans.push_back(nums1[i]);
                i++;
            }else{
                 ans.push_back(nums2[j]);
                j++;
            }
        }

        while( i <m){
            ans.push_back(nums1[i]);
            i++;
        }
        while(j <n){
            ans.push_back(nums2[j]);
            j++;
        }
        nums1 = {0};
        i = 0 ;
        nums1[i] = ans[i];
        for( i  = 1 ;i<(m+n);i++){
           nums1.push_back(ans[i]);
        }
    }
};





